{"version":3,"sources":["logo.svg","screens/CheckIn.js","screens/AlertsOptIn.js","screens/COVIDCheck.js","screens/COVIDTestDate.js","screens/SafetyRejection.js","screens/SymptomsScreen.js","screens/WFHConf.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","CheckIn","className","src","logo","alt","href","target","rel","AlertsOptIn","COVIDCheck","COVIDTestDate","SafetyRejection","SymptomsScreen","WFHConf","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wJAAAA,EAAOC,QAAU,IAA0B,kC,oMCyB5BC,MArBf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,mCACO,4CADP,wBAGA,uBACEH,UAAU,WACVI,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,kBCFOC,MARf,WACE,OACE,mCACO,oDADP,yBCMWC,MARf,WACE,OACE,mCACO,mDADP,yBCMWC,MARf,WACE,OACE,mCACO,sDADP,yBCMWC,MARf,WACE,OACE,mCACO,wDADP,yBCMWC,MARf,WACE,OACE,mCACO,uDADP,yBCMWC,MARf,WACE,OACE,mCACO,gDADP,yBC4CWC,MApCf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,WACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,aACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,gBACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,oBACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,aACV,kBAAC,IAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,qBACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,oBACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,aACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,KACV,kBAAC,EAAD,UC7BUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c4e004df.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport logo from \"../logo.svg\";\nimport \"../App.css\";\n\nfunction CheckIn() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default CheckIn;\n","import React from \"react\";\n\nfunction AlertsOptIn() {\n  return (\n    <p>\n      Edit <code>src/AlertsOptIn.js</code> and save to reload.\n    </p>\n  );\n}\n\nexport default AlertsOptIn;\n","import React from \"react\";\n\nfunction COVIDCheck() {\n  return (\n    <p>\n      Edit <code>src/COVIDCheck.js</code> and save to reload.\n    </p>\n  );\n}\n\nexport default COVIDCheck;\n","import React from \"react\";\n\nfunction COVIDTestDate() {\n  return (\n    <p>\n      Edit <code>src/COVIDTestDate.js</code> and save to reload.\n    </p>\n  );\n}\n\nexport default COVIDTestDate;\n","import React from \"react\";\n\nfunction SafetyRejection() {\n  return (\n    <p>\n      Edit <code>src/SafetyRejection.js</code> and save to reload.\n    </p>\n  );\n}\n\nexport default SafetyRejection;\n","import React from \"react\";\n\nfunction SymptomsScreen() {\n  return (\n    <p>\n      Edit <code>src/SymptomsScreen.js</code> and save to reload.\n    </p>\n  );\n}\n\nexport default SymptomsScreen;\n","import React from \"react\";\n\nfunction WFHConf() {\n  return (\n    <p>\n      Edit <code>src/WFHConf.js</code> and save to reload.\n    </p>\n  );\n}\n\nexport default WFHConf;\n","import React from \"react\";\nimport \"./App.css\";\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\nimport GoodDay from \"./screens/GoodDay\";\nimport CheckIn from \"./screens/CheckIn\";\nimport AlertsOptIn from \"./screens/AlertsOptIn\";\nimport COVIDCheck from \"./screens/COVIDCheck\";\nimport COVIDTestDate from \"./screens/COVIDTestDate\";\nimport SafetyRejection from \"./screens/SafetyRejection\";\nimport SymptomsScreen from \"./screens/SymptomsScreen\";\nimport WFHConf from \"./screens/WFHConf\";\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/alerts\">\n          <AlertsOptIn />\n        </Route>\n        <Route path=\"/check-in\">\n          <CheckIn />\n        </Route>\n        <Route path=\"/covid-check\">\n          <COVIDCheck />\n        </Route>\n        <Route path=\"/covid-test-date\">\n          <COVIDTestDate />\n        </Route>\n        <Route path=\"/good-day\">\n          <GoodDay />\n        </Route>\n        <Route path=\"/Safety-Rejection\">\n          <SafetyRejection />\n        </Route>\n        <Route path=\"/Symptoms-Screen\">\n          <SymptomsScreen />\n        </Route>\n        <Route path=\"/WFH-Conf\">\n          <WFHConf />\n        </Route>\n        <Route path=\"/\">\n          <CheckIn />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}